<?php
declare(strict_types=1);
require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\LearningPath\Utils\LearningPathTrait;
use ILIAS\DI\Container;
use srag\CustomInputGUIs\LearningPath\Loader\CustomInputGUIsLoaderDetector;
use srag\DevTools\LearningPath\DevToolsCtrl;
use srag\RemovePluginDataConfirm\LearningPath\RepositoryObjectPluginUninstallTrait;

/**
 * Class ilLearningPathPlugin
 *
 * Generated by SrPluginGenerator v2.9.1
 *
 * @author Robert <support@fluxlabs.ch>
 * @author fluxlabs <support@fluxlabs.ch>
 */
class ilLearningPathPlugin extends ilRepositoryObjectPlugin
{

    use RepositoryObjectPluginUninstallTrait;
    use LearningPathTrait;

    const PLUGIN_CLASS_NAME = self::class;
    const PLUGIN_ID = "xlpa";
    const PLUGIN_NAME = "LearningPath";
    /**
     * @var self|null
     */
    protected static $instance = null;


    /**
     * ilLearningPathPlugin constructor
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * @return self
     */
    public static function getInstance() : self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }


    /**
     * @inheritDoc
     */
    public function exchangeUIRendererAfterInitialization(Container $dic) : Closure
    {
        return CustomInputGUIsLoaderDetector::exchangeUIRendererAfterInitialization();
    }


    /**
     * @inheritDoc
     */
    public function getPluginName() : string
    {
        return self::PLUGIN_NAME;
    }


    /**
     * @inheritDoc
     */
    public function updateLanguages(/*?array*/ $a_lang_keys = null) : void
    {
        parent::updateLanguages($a_lang_keys);

        $this->installRemovePluginDataConfirmLanguages();

        DevToolsCtrl::installLanguages(self::plugin());
    }


    /**
     * @inheritDoc
     */
    protected function deleteData() : void
    {
        self::learningPath()->dropTables();
    }


    /**
     * @inheritDoc
     */
    protected function shouldUseOneUpdateStepOnly() : bool
    {
        return false;
    }

    private static $lp_event_handler;

    public static function handleEvent($component, $event, $parameter)
    {
        switch ($component) {
            case "Services/Tracking":
                switch ($event) {
                    case "updateStatus":
                        self::onServiceTrackingUpdateStatus($parameter);
                        break;
                }
                break;
            case "Services/Object":
                switch ($event) {
                    case "beforeDeletion":
                        self::onObjectDeletion($parameter);
                        break;
                    case "toTrash":
                        self::onObjectToTrash($parameter);
                        break;
                }
                break;

            case "Modules/LearningPath":
                switch ($event) {
                    case "deleteParticipant":
                        self::onParticipantDeletion($parameter);
                        break;
                    case "addParticipant":
                    default:
                        break;
                }
                break;

            default:
                throw new ilException(
                    "ilLearningPathAppEventListener::handleEvent: " .
                    "Won't handle events of '$component'."
                );
        }
    }

    private static function onServiceTrackingUpdateStatus(array $parameter)
    {
        if (!self::$lp_event_handler) {
            self::$lp_event_handler = new ilLSLPEventHandler(self::getIlTree(), self::getIlLPStatusWrapper());
        }
        self::$lp_event_handler->updateLPForChildEvent($parameter);
    }

    private static function onObjectDeletion(array $parameter)
    {
        $handler = self::getLSEventHandler();
        $handler->handleObjectDeletion($parameter);
    }

    private static function onObjectToTrash(array $parameter)
    {
        $handler = self::getLSEventHandler();
        $handler->handleObjectToTrash($parameter);
    }

    private static function onParticipantDeletion(array $parameter)
    {
        $handler = self::getLSEventHandler();
        $obj_id = (int) $parameter['obj_id'];
        $usr_id = (int) $parameter['usr_id'];

        $handler->handleParticipantDeletion($obj_id, $usr_id);
    }

    protected static function getLSEventHandler() : ilLSEventHandler
    {
        return new ilLSEventHandler(self::getIlTree());
    }

    protected static function getIlTree() : ilTree
    {
        global $DIC;
        return $DIC['tree'];
    }

    protected static function getIlLPStatusWrapper() : ilLPStatusWrapper
    {
        return new ilLPStatusWrapper();
    }

}
