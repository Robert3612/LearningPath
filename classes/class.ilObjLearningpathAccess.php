<?php

require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\LearningPath\Utils\LearningPathTrait;
use srag\DIC\LearningPath\DICTrait;

/**
 * Class ilObjLearningPathAccess
 *
 * Generated by SrPluginGenerator v2.9.1
 *
 * @author Robert <support@fluxlabs.ch>
 * @author fluxlabs <support@fluxlabs.ch>
 */
class ilObjLearningPathAccess extends ilObjectPluginAccess
{

    use DICTrait;
    use LearningPathTrait;

    const PLUGIN_CLASS_NAME = ilLearningPathPlugin::class;
    /**
     * @var self|null
     */
    protected static $instance = null;
    public static $using_code = false;


    /**
     * ilObjLearningPathAccess constructor
     */
    public function __construct()
    {
        parent::__construct();
    }

    public static function _getCommands() : array
    {
        $commands = array(
            [
                'cmd' => ilObjLearningPathGUI::CMD_VIEW,
                'permission' => 'read',
                'lang_var' => 'show',
                'default' => true
            ],
            [
                'cmd' => ilObjLearningPathGUI::CMD_LEARNER_VIEW,
                'permission' => 'read',
                'lang_var' => 'show',
            ],
            [
                'cmd' => ilObjLearningPathGUI::CMD_CONTENT,
                'permission' => 'write',
                'lang_var' => 'edit_content'
            ],
            [
                'cmd' => ilObjLearningPathGUI::CMD_SETTINGS,
                'permission' => 'write',
                'lang_var' => 'settings'
            ],
            [
                'cmd' => ilObjLearningPathGUI::CMD_UNPARTICIPATE,
                'permission' => 'unparticipate',
                'lang_var' => 'unparticipate'
            ]
        );
        return $commands;
    }

    public function usingRegistrationCode()
    {
        return self::$using_code;
    }
    /**
     * @inheritDoc
     */
    public static function isOffline($ref_id) : bool
    {

        $obj = ilObjectFactory::getInstanceByRefId($ref_id);
        $act = $obj->getLSActivation();
        $online = $act->getIsOnline();

        if (!$online
            && ($act->getActivationStart() !== null ||
                $act->getActivationEnd() !== null)
        ) {
            $ts_now = time();
            $activation_start = $act->getActivationStart();
            if ($activation_start !== null) {
                $after_activation_start = $ts_now >= $activation_start->getTimestamp();
            } else {
                $after_activation_start = true;
            }
            $activation_end = $act->getActivationEnd();
            if ($activation_end !== null) {
                $before_activation_end = $ts_now <= $activation_end->getTimestamp();
            } else {
                $before_activation_end = true;
            }

            $online = ($after_activation_start && $before_activation_end);
        }

        if ($act->getEffectiveOnlineStatus() === false && $online === true) {
            $obj->setEffectiveOnlineStatus(true);
            $obj->announceLSOOnline();
        }
        if ($act->getEffectiveOnlineStatus() === true && $online === false) {
            $obj->setEffectiveOnlineStatus(false);
            $obj->announceLSOOffline();
        }


        return !$online;
    }


    /**
     * @return self
     */
    public static function getInstance() : self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }


    /**
     * @param int|null $ref_id
     *
     * @return bool
     */
    public static function hasDeleteAccess(?int $ref_id = null) : bool
    {
        return self::checkAccess("delete", "delete", $ref_id);
    }


    /**
     * @param int|null $ref_id
     *
     * @return bool
     */
    public static function hasEditPermissionAccess(?int $ref_id = null) : bool
    {
        return self::checkAccess("edit_permission", "edit_permission", $ref_id);
    }


    /**
     * @param int|null $ref_id
     *
     * @return bool
     */
    public static function hasReadAccess(?int $ref_id = null) : bool
    {
        return self::checkAccess("read", "read", $ref_id);
    }


    /**
     * @param int|null $ref_id
     *
     * @return bool
     */
    public static function hasVisibleAccess(?int $ref_id = null) : bool
    {
        return self::checkAccess("visible", "visible", $ref_id);
    }


    /**
     * @param int|null $ref_id
     *
     * @return bool
     */
    public static function hasWriteAccess(?int $ref_id = null) : bool
    {
        return self::checkAccess("write", "write", $ref_id);
    }


    /**
     * @param object|string $class
     * @param string        $cmd
     */
    public static function redirectNonAccess($class, string $cmd = "") : void
    {
        ilUtil::sendFailure(self::plugin()->translate("permission_denied", ilObjLearningPathGUI::LANG_MODULE_OBJECT), true);

        if (is_object($class)) {
            self::dic()->ctrl()->clearParameters($class);
            self::dic()->ctrl()->redirect($class, $cmd);
        } else {
            self::dic()->ctrl()->clearParametersByClass($class);
            self::dic()->ctrl()->redirectByClass($class, $cmd);
        }
    }


    /**
     * @param string   $a_cmd
     * @param string   $a_permission
     * @param int|null $a_ref_id
     * @param int|null $a_obj_id
     * @param int|null $a_user_id
     *
     * @return bool
     */
    protected static function checkAccess(string $a_cmd, string $a_permission, ?int $a_ref_id = null, ?int $a_obj_id = null, ?int $a_user_id = null) : bool
    {
        return self::getInstance()->_checkAccess($a_cmd, $a_permission, $a_ref_id, $a_obj_id, $a_user_id);
    }


    /**
     * @inheritDoc
     */
    public function _checkAccess($cmd, $permission, $ref_id, $obj_id, $usr_id = "") : bool
    {
        list($rbacsystem, $il_access, $lng) = $this->getDICDependencies();

        switch ($permission) {
            case 'visible':
                $has_any_administrative_permission = (
                    $rbacsystem->checkAccessOfUser($usr_id, 'write', $ref_id) ||
                    $rbacsystem->checkAccessOfUser($usr_id, 'edit_members', $ref_id) ||
                    $rbacsystem->checkAccessOfUser($usr_id, 'edit_learning_progress', $ref_id)
                );

                $is_offine = $this->isOffline($ref_id);

                if ($is_offine && !$has_any_administrative_permission) {
                    $il_access->addInfoItem(IL_NO_OBJECT_ACCESS, $lng->txt("offline"));
                    return false;
                }
                return true;

            default:
                return $rbacsystem->checkAccessOfUser($usr_id, $permission, $ref_id);
        }
    }

    protected function getDICDependencies() : array
    {
        global $DIC;
        $rbacsystem = $DIC['rbacsystem'];
        $il_access = $DIC['ilAccess'];
        $lng = $DIC['lng'];

        return [
            $rbacsystem,
            $il_access,
            $lng
        ];
    }
}
